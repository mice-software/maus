#!/bin/bash
# Configure script

# This is the maximum length of text (ignoring whitespace), 50 chars
##################################################
# this is the maximum amount of characters (including whitespace) per line)
######################################################################


arch=`uname -s`

DYLIB_VAR=LD_LIBRARY_PATH  # DYLIB_VAR is LD_LIBRARY_PATH for Linux.  Substituted into env.sh.
if [ "$arch" = "Darwin" ]; then
    DYLIB_VAR=DYLD_LIBRARY_PATH  # else for Mac OSX it's DYLD_LIBRARY_PATH

    echo "WARNING: You are using Mac OSX.  However, the version that MICE uses";
    echo "WARNING: of Recpack does not work on Mac OSX.  Please consult the";
    echo "WARNING: following link to install a Mac OSX version of Recpack:";
    echo "WARNING:";
    echo "WARNING:   http://micewww.pp.rl.ac.uk/projects/maus/wiki/InstallMacOSX";
    echo "WARNING:";
    echo "WARNING: and realize that you may not publish results with unoffical";
    echo "WARNING: versions of Recpack.";
    echo "WARNING: ";
fi

            ##################################################
echo "INFO: This is the './configure' script.  You should only"
echo "INFO: run this once. The purpose of me is to:"
echo "INFO:"
echo "INFO:     1. Check that you have a compiler"
echo "INFO:     2. Check that you have Python"
echo "INFO:     3. Check your version of Python is supported"
echo "INFO:     4. Create a file called 'env.sh'"
echo "INFO:"
echo

# Check for g++ ##################################################
(type -P gcc &>/dev/null && type -P g++ &>/dev/null) || {
    echo "FATAL: gcc/g++ is required to compile code." >&2;
    exit 1; }

# Find where MAUS is installed
maus_root_dir=`pwd`

if echo $maus_root_dir | grep -E '[ "]' >/dev/null;
then
    echo "FATAL: No whitespace allowed in directory names.">&2;
    echo "FATAL:">&2;
    echo "FATAL: See:" >&2;
    echo "FATAL:" >&2;
    echo "FATAL: http://micewww.pp.rl.ac.uk:8080/issues/306" >&2;
    exit 1;
fi

# Assign the location of the third party libraries  
# In order of preference the location is set to:
# 1. The first command line argument passed to the configure script
# 2. Any existing environment variable called "maus_third_party" e.g. if set by user's .bashrc file
# 3. The current maus working directory, as held by the variable maus_root_dir  
if [ "$1" ]; then
    maus_third_party=$1 #if a command line argument is entered, set third party directory from it
elif [ -z "${maus_third_party}" ]; then
    maus_third_party="${maus_root_dir}/third_party" #if not set above or anywhere else use the local maus working directory
fi

# Temporarily setup the environment (this gets repeated in the env.sh output)
#      maus_central says where the precompiled third party libraries are (if any)
#      PATH says where the binaries are
#      DYLIB_VAR says where your shared libraries are
echo "INFO: Attempting to use third party libraries from " ${maus_third_party}
echo
if [ -z "${PATH}" ]; then  # see if the variable exists yet
    PATH="${maus_third_party}/install/bin"       # if not, initialize it
else
    PATH="${maus_third_party}/install/bin:$PATH" # else add to it
fi

if [ -z "${!DYLIB_VAR}" ]; then  # see if the variable exists yet
    eval ${DYLIB_VAR}="${maus_third_party}/install/lib"                  # if not, initialize it
else
    eval ${DYLIB_VAR}="${maus_third_party}/install/lib:${!DYLIB_VAR}" # else add to to it
fi

# Check for Python
type -P python &>/dev/null || {
    echo "FATAL: Python is required.">&2;
    echo "FATAL:">&2;
    echo "FATAL: To install within MAUS, set the MAUS_ROOT_DIR" >&2;
    echo "FATAL: environmental variable.  For Bourne-compatible" >&2;
    echo "FATAL: shells like 'bash', run:" >&2;
    echo "FATAL:" >&2;
    echo "FATAL:      export MAUS_ROOT_DIR=\"${maus_root_dir}\"" >&2;
    echo "FATAL:" >&2;
    echo "FATAL: then run the following to install Python 2.7:" >&2;
    echo "FATAL:" >&2;
    echo "FATAL:      ./third_party/bash/01python.bash" >&2;
    exit 1; }

python_version=`env $DYLIB_VAR=${maus_third_party}/install/lib python -V 2>&1`
## Check for supported python version
if [ "${python_version}" != "Python 2.7" ]
then               ##################################################
    if [ ! -f "env.sh" ]
    then
        echo "WARNING: Unsupported python version (You are using ${python_version}),";
        echo "WARNING: so using Python 2.7 is recommended.  MAUS will install extra";
        echo "WARNING: packages in this location like numpy and xboa and currently";
        echo "WARNING: the way we go about this is having our own Python install.";
        echo "WARNING: ";
        echo "WARNING: To install within MAUS, set the MAUS_ROOT_DIR";
        echo "WARNING: environmental variable.  For Bourne-compatible";
        echo "WARNING: shells like 'bash', run:";
        echo "WARNING: ";
        echo "WARNING:       export MAUS_ROOT_DIR=\"${maus_root_dir}\"";
        echo "WARNING: ";
        echo "WARNING: then run the following to install Python 2.7:"
        echo "WARNING: ";
        echo "WARNING:       ./third_party/bash/01python.bash";
        echo
    fi
fi

# check for SCons
type -P scons &>/dev/null || {
    if [ ! -f "env.sh" ]
    then
        echo "WARNING: Scons is required to proceed after this step"
        echo "WARNING:"
        echo "WARNING: To install within MAUS, set the MAUS_ROOT_DIR";
        echo "WARNING: environmental variable.  For Bourne-compatible";
        echo "WARNING: shells like 'bash', run:";
        echo "WARNING: ";
        echo "WARNING:       export MAUS_ROOT_DIR=\"${maus_root_dir}\"";
        echo "WARNING: ";
        echo "WARNING: then run the following to install Scons:" >&2;
        echo "WARNING:" >&2;
        echo "WARNING:      ./third_party/bash/40python_extras.bash";
        echo "WARNING:";
        echo
    fi
    }


root_version=root_v5.30.03

if [ ! -f "env.sh" ]
then
    echo "RECOMMENDATION:  This appears to be your first time running MAUS."
    echo "RECOMMENDATION:  If you want to install all the external dependencies"
    echo "RECOMMENDATION:  automatically (takes an hour or so since geant is big)"
    echo "RECOMMENDATION:  then run the following command:"
    echo "RECOMMENDATION:"
    echo "RECOMMENDATION:       ./tests/integration/install_then_build_then_test.bash"
    echo "RECOMMENDATION:"
    echo
fi


### Create environment files

cat > env.sh <<EOF
#/bin/sh

############################## DO NOT EDIT #####################################
# This file was automatically generated by the script
# ${maus_root_dir}/configure
################################################################################

if [ -z "\$MAUS_ROOT_DIR" ]; then

     export MAUS_ROOT_DIR="${maus_root_dir}"

     export MAUS_THIRD_PARTY="${maus_third_party}"
     echo "INFO: Using third party libraries from ${maus_third_party}"

     maus_bin_dirs="\${MAUS_THIRD_PARTY}/install/bin"
     if [ "$arch" == "Darwin" ]; then
         maus_bin_dirs="\${MAUS_THIRD_PARTY}/install/Python.framework/Versions/2.7/bin:\${maus_bin_dirs}"
     fi

     if [ -z "\${PATH}" ]; then  # see if the variable exists yet
         export PATH="\${maus_bin_dirs}" # initialize it
     else
         export PATH="\${maus_bin_dirs}:\${PATH}" # else add it
     fi

     maus_lib_dirs="\${MAUS_THIRD_PARTY}/install/lib"
     if [ "$arch" == "Darwin" ]; then
         maus_lib_dirs="\${MAUS_THIRD_PARTY}/install/Python.framework/Versions/2.7/lib:\${maus_lib_dirs}"
     fi

     if [ -z "\${$DYLIB_VAR}" ]; then  # see if the variable exists yet
          export $DYLIB_VAR="\${maus_lib_dirs}" # intiailize it
     else
          export $DYLIB_VAR="\${maus_lib_dirs}:\${$DYLIB_VAR}" # else add it
     fi

     if [ -z "\${PYTHONPATH}" ]; then  # see if the variable exists yet
          export PYTHONPATH="\$MAUS_ROOT_DIR/build" #initialize it
     else
          export PYTHONPATH="\$MAUS_ROOT_DIR/build:\$PYTHONPATH" # else add it
     fi

     export $DYLIB_VAR="\$MAUS_THIRD_PARTY/build:\$$DYLIB_VAR"
     export $DYLIB_VAR="\$MAUS_ROOT_DIR/build:\$$DYLIB_VAR"

     # maus common
     export PYTHONPATH="\$MAUS_ROOT_DIR/src/common_py:\$PYTHONPATH"
     export $DYLIB_VAR="\$MAUS_ROOT_DIR/src/common_py:\$$DYLIB_VAR"

     export PYTHONPATH="\$MAUS_ROOT_DIR/src/common_py/docstore:\$PYTHONPATH" 

     export PYTHONPATH="\$MAUS_ROOT_DIR/src/common_py/mauscelery:\$PYTHONPATH"
     export LD_LIBRARY_PATH="\$MAUS_ROOT_DIR/src/common_py/mauscelery:\$LD_LIBRARY_PATH"
     export CELERY_LOADER="mausloader.CeleryLoader"

     export PYTHONPATH="\$MAUS_ROOT_DIR/src/common_py/docstore:\$PYTHONPATH"
     export LD_LIBRARY_PATH="\$MAUS_ROOT_DIR/src/common_py/docstore:\$LD_LIBRARY_PATH"

     export G4DEBUG=1
     export G4VERS=geant4.9.2.p04
     export G4SYSTEM=$arch-g++
     export G4INSTALL="\${MAUS_THIRD_PARTY}/build/\${G4VERS}"
     export G4LIB="\${G4INSTALL}/lib"
     export $DYLIB_VAR="\${G4LIB}/\${G4SYSTEM}:\${$DYLIB_VAR}"
     export G4INCLUDE="\${G4INSTALL}/include/"
     export G4TMP="\${G4INSTALL}"
     export G4VIS_BUILD_DAWNFILE_DRIVER=1
     export G4VIS_USE_DAWNFILE=1
     export G4VIS_USE=0
     export G4OPTIMISE=2
     export OGLHOME=/usr/X11R6
     export G4LEDATA="\${G4INSTALL}/data/G4EMLOW6.2/"
     export G4ABLADATA="\${G4INSTALL}/data/G4ABLA3.0/"
     export G4NEUTRONDATA="\${G4INSTALL}/data/G4NDL3.13/"
     export G4LEVELGAMMADATA"=\${G4INSTALL}/data/PhotonEvaporation2.0/"
     export G4RADIOACTIVEDATA"=\${G4INSTALL}/data/RadioactiveDecay3.2/"

     export MICEFILES="\${MAUS_ROOT_DIR}/src/legacy/FILES"

     export maus_no_optimize=0 # force gcc not to optimise
     export maus_lcov=0 # enable cpp coverage - requires lcov
     export maus_debug=0 # enable debugging
     export maus_gprof=0 # enable cpp profiling - requires gprof

     echo "SUCCESS: MAUS setup"
else
     echo "WARNING: MAUS already setup"
fi

# setup ROOT
if [ -f \${MAUS_THIRD_PARTY}/build/$root_version/bin/thisroot.sh ]
then
     source \${MAUS_THIRD_PARTY}/build/$root_version/bin/thisroot.sh
fi

EOF

echo "SUCCESS: Whenever you want to use MAUS, you must 'source'"
echo "SUCCESS: the environmental variables file.  For Bourne-"
echo "SUCCESS: compatible shells like 'bash', run:"
echo "SUCCESS:"
echo "SUCCESS:      source env.sh"
echo "SUCCESS:"
echo "SUCCESS: which can be added to your respective shell's"
echo "SUCCESS: startup scripts.  Example: ~/.bashrc for 'bash'."
