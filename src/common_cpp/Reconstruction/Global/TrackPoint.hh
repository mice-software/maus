/* This file is part of MAUS: http://  micewww.pp.rl.ac.uk:8080/projects/maus
 * 
 * MAUS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * MAUS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with MAUS.  If not, see <http://  www.gnu.org/licenses/>.
 */

/* Author: Peter Lane
 */

#ifndef COMMON_CPP_RECONSTRUCTION_TRACK_POINT_HH
#define COMMON_CPP_RECONSTRUCTION_TRACK_POINT_HH

#include <iostream>

#include "src/common_cpp/Optics/PhaseSpaceVector.hh"
#include "src/common_cpp/Simulation/MAUSPrimaryGeneratorAction.hh"

namespace MAUS {

class CovarianceMatrix;
class Vector<double>;

namespace reconstruction {
namespace global {

class Detector;

/* @class TrackPoint a phase space vector with redundant t/E and z/Pz
 * coordinates as well as an ID that links the track to the detector that
 * measured it.
 *
 * The redundant sets of coordinates can be filled in by explicitly using the
 * FillInCoordinates() function or by setting all of the coordinates at once
 * using the array or parameterised constructors (which implicitly call
 * FillInCoordinates()). If t < 0 it fills in t and E from z, Pz, and the given
 * mass parameter. If t >= 0 and z < 0, it fills in z and Pz from t, E, and
 * the mass.
 */
class TrackPoint : public MAUS::PhaseSpaceVector {
 public:
  /* @brief	Construct with all elements initialized to zero and phase space type
   *        temporal.
   */
  TrackPoint();

  /* @brief	Construct with all elements initialized to zero and given phase
   *        space type.
   */
  TrackPoint(const PhaseSpaceType type);

  /* @brief  Copy constructor.
   */
  TrackPoint(const TrackPoint & original_instance);

  /* @brief  Copy constructor with phase space type conversion.
   */
  TrackPoint(const TrackPoint & original_instance,
             const double mass,
             const PhaseSpaceType type);

  /* @brief  Base class copy constructor.
   */
  explicit TrackPoint(const PhaseSpaceVector & original_instance,
                      const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  /* @brief  Vector<double> copy constructor.
   */
  explicit TrackPoint(const Vector<double> & original_instance,
                      const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  /* @brief Create with coordinates from an array.
     Order is t, E, x, Px, y, Py, z, Pz.
   */
  explicit TrackPoint(double const * const array,
                      const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  /* @brief	Reconstructed track point constructor. The track point was not
   * generated by a detector, so an uncertanty matrix must be supplied. The
   * detector_id field is set to Detector::None. 
   */
  TrackPoint(const double x1, const double p1,
             const double x2, const double p2,
             const double x3, const double p3,
             const CovarianceMatrix & uncertainties,
             const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  /* @brief	Detector-generated track point constructor. The Detector reference
   * is used to copy it's ID and uncertainty matrix.
   * 
   */
  TrackPoint(const double x1, const double p1,
             const double x2, const double p2,
             const double x3, const double p3,
             const Detector & detector,
             const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  /* @brief	This constructor is used when to create well-defined particle tracks
   * for simulating through MICE.
   */
  TrackPoint(const double x1, const double p1,
             const double x2, const double p2,
             const double x3, const double p3,
             const int particle_id,
             const PhaseSpaceType type=PhaseSpaceType::kTemporal);

  ~TrackPoint();

  TrackPoint & operator=(const TrackPoint& rhs);

  const bool operator==(const TrackPoint& rhs) const;

  /* @brief Determines if the track point occurs earlier in time than another.
   */
  const bool operator<(const TrackPoint& rhs) const;

  /* @brief Determines if the track point occurs later in time than another.
   */
  const bool operator>(const TrackPoint& rhs) const;

  // *************************
  //       Accessors
  // *************************

  void set_particle_id(unsigned int id);
  unsigned int particle_id() const;

  void set_detector_id(unsigned int id);
  unsigned int detector_id() const;

  void set_uncertainties(const CovarianceMatrix & uncertainties);
  const CovarianceMatrix & uncertainties() const;

  double time()       const;
  double t()          const {return time();}
  double energy()     const;
  double E()          const {return energy();}
  double z()          const;
  double z_momentum() const;
  double Pz()         const {return z_momentum();}
  void set_time(double time);
  void set_t(double time)         {set_time(time);}
  void set_energy(double energy);
  void set_E(double energy)       {set_energy(energy);}
  void set_z(double z);
  void set_z_momentum(double z_momentum);
  void set_Pz(double z_momentum)  {set_z_momentum(z_momentum);}

 protected:
  unsigned int detector_id_;  // = 0 if this was not measured in a detector
  CovarianceMatrix * uncertainties_;
  int particle_id_;
};

MAUS::MAUSPrimaryGeneratorAction::PGParticle PrimaryGeneratorParticle(
    const TrackPoint & point);

}  // namespace global
}  // namespace reconstruction
}  // namespace MAUS

#endif
