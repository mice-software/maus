
import MAUS
import analysis

import os
import argparse
import ROOT
import math
import array

ROOT.gROOT.SetBatch( True )

ROOT.gStyle.SetLabelSize( 0.04, 'X' )
ROOT.gStyle.SetLabelSize( 0.04, 'Y' )
ROOT.gStyle.SetTitleXSize( 0.05 )
ROOT.gStyle.SetTitleYSize( 0.05 )
ROOT.gStyle.SetPadTopMargin( 0.08 )
ROOT.gStyle.SetPadBottomMargin( 0.13 )
ROOT.gStyle.SetPadLeftMargin( 0.13 )
ROOT.gStyle.SetPadRightMargin( 0.07 )
ROOT.gStyle.SetOptTitle(0)
ROOT.gStyle.SetOptStat(1110)
ROOT.gStyle.SetStatX(0.93)
ROOT.gStyle.SetStatY(0.92)
ROOT.gStyle.SetStatW(0.25)
ROOT.gStyle.SetStatH(0.20)
    


OUTPUT_DIRECTORY = "."

def config_axes(plot) :
  plot.SetLabelSize( 0.04, 'X' )
  plot.SetLabelSize( 0.04, 'Y' )
  plot.SetTitleSize( 0.05, 'X' )
  plot.SetTitleSize( 0.05, 'Y' )


def get_unit_symbol(variable) :
  if variable == 'x' : 
    return "mm", "x"
  if variable == 'y' : 
    return "mm", "y"
  if variable == 'px' : 
    return "MeV/c", "p_{x}"
  if variable == 'py' : 
    return "MeV/c", "p_{y}"
  if variable == 'pz' : 
    return "MeV/c", "p_{z}"
  if variable == 'mx' : 
    return None, "m_{x}"
  if variable == 'my' : 
    return None, "m_{y}"
  if variable == 'ty' : 
    return "rad", "aTan(p_{y}/p_{z})"
  if variable == 'ty' : 
    return "rad", "aTan(p_{y}/p_{z})"
  if variable == 'xy' :
    return "mm", "xy"
  if variable == 'pxpy' :
    return "MeV/c", "p_{x}p_{y}"


def kalman_validation_plots( filename ) :
  infile = ROOT.TFile(filename)

# Pull Plots
  for pl_id in range(-14, 0) + range(1, 16) :
    outfilename = os.path.join(OUTPUT_DIRECTORY, "plane:{0}_pull.pdf".format(pl_id))
    canvas = ROOT.TCanvas("pull_canvas_{0}".format(pl_id))
    pull_plot = infile.Get('pulls/plane:'+str(pl_id)+'_pulls')
    pull_plot.GetXaxis().SetTitle("Pull  [mm]")
    pull_plot.Draw()
    canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "all_pulls.pdf".format(pl_id))
  canvas = ROOT.TCanvas("all_pull_canvas".format(pl_id))
  pull_plot = infile.Get('pulls/all')
  pull_plot.GetXaxis().SetTitle("Plane ID")
  pull_plot.GetYaxis().SetRangeUser(-5.0, 5.0)
  pull_plot.GetYaxis().SetTitle("Pull  [mm]")
  pull_plot.Draw('COLZ')
  canvas.SaveAs(outfilename, 'pdf')

# Chi Squared Plots
  for tracker in [ "up", "down" ] :
    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_tracker_chi_squared.pdf".format(tracker))
    canvas = ROOT.TCanvas("{0}_tracker_chi_sq_canv".format(tracker))
    chi_sq_plot = infile.Get("statistics/{0}_chi_sq".format(tracker))
    chi_sq_plot.GetXaxis().SetTitle("%{chi}^{2}")
    canvas.SaveAs(outfilename, 'pdf')

# P-Value Plots
    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_tracker_p_value.pdf".format(tracker))
    canvas = ROOT.TCanvas("{0}_tracker_p_value_canv".format(tracker))
    p_val_plot = infile.Get("statistics/{0}_p_value".format(tracker))
    config_axes(p_val_plot)
    p_val_plot.SetStats(ROOT.kFALSE)
    p_val_plot.Rebin(4)
    p_val_plot.GetXaxis().SetTitle("P Value")
    max_y = p_val_plot.GetMaximum()
    p_val_plot.Draw()
    p_val_plot.GetYaxis().SetRangeUser(0.0, 1.05*max_y)
    canvas.SaveAs(outfilename, 'pdf')


# Performance
  for plot in [ 'x', 'y', 'px', 'py', 'mx', 'my', 'pz' ] :
    plot_name = 'resolution_{0}'.format(plot)
    outfilename = os.path.join(OUTPUT_DIRECTORY, plot_name+".pdf")
    unit, symbol = get_unit_symbol(plot)
    canvas = ROOT.TCanvas(plot_name+"_canv")
    chi_sq_plot = infile.Get("performance/"+plot_name)
    chi_sq_plot.GetXaxis().SetTitle("Plane ID")
    if unit :
      chi_sq_plot.GetYaxis().SetTitle("{0} - {0}^{{Truth}}  [{1}]".format(symbol, unit))
    else :
      chi_sq_plot.GetYaxis().SetTitle("{0} - {0}^{{Truth}}".format(symbol))
    chi_sq_plot.Draw()
    canvas.SaveAs(outfilename, 'pdf')

  infile.Close()


def emittance_reconstruction_plots( filename ) :
  infile = ROOT.TFile(filename)

  outfilename = os.path.join(OUTPUT_DIRECTORY, "4D_emittance.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("emittance_reconstruction/emittance")
  plot.GetXaxis().SetTitle("z  [mm]")
  plot.GetYaxis().SetTitle("#varepsilon_{#perp}^{N}  [mm]")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "4D_alpha.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("emittance_reconstruction/alpha")
  plot.GetXaxis().SetTitle("z  [mm]")
  plot.GetYaxis().SetTitle("#{alpha}_{#perp}^{N}  [mm]")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "4D_beta.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("emittance_reconstruction/beta")
  plot.GetXaxis().SetTitle("z  [mm]")
  plot.GetYaxis().SetTitle("#{beta}_{#perp}^{N}  [mm]")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "momentum.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("emittance_reconstruction/momentum")
  plot.GetXaxis().SetTitle("z  [mm]")
  plot.GetYaxis().SetTitle("p  [MeV/c]")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  infile.Close()


def virtual_plane_plots( filename ) :
  infile = ROOT.TFile(filename)

  outfilename = os.path.join(OUTPUT_DIRECTORY, "emittance_4d.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("virtual_plots/emittance")
  plot.GetYaxis().SetTitle("#epsilon_{4D}^{N}     [mm]")
  plot.GetXaxis().SetTitle("z   [mm]")
  plot.GetXaxis().SetLabelSize( 0.04 )
  plot.GetYaxis().SetLabelSize( 0.04 )
  plot.GetXaxis().SetTitleSize( 0.05 )
  plot.GetYaxis().SetTitleSize( 0.05 )
  plot.Draw("AL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "beta_4d.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("virtual_plots/beta_function")
  plot.GetYaxis().SetTitle("#beta_{4D}     [mm]")
  plot.GetXaxis().SetTitle("z   [mm]")
  plot.GetXaxis().SetLabelSize( 0.04 )
  plot.GetYaxis().SetLabelSize( 0.04 )
  plot.GetXaxis().SetTitleSize( 0.05 )
  plot.GetYaxis().SetTitleSize( 0.05 )
  plot.Draw("AL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "alpha_4d.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("virtual_plots/alpha_function")
  plot.GetYaxis().SetTitle("#alpha_{4D}")
  plot.GetXaxis().SetTitle("z   [mm]")
  plot.GetXaxis().SetLabelSize( 0.04 )
  plot.GetYaxis().SetLabelSize( 0.04 )
  plot.GetXaxis().SetTitleSize( 0.05 )
  plot.GetYaxis().SetTitleSize( 0.05 )
  plot.Draw("AL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "momentum.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("virtual_plots/momentum")
  plot.GetYaxis().SetTitle("p   [MeV/c]")
  plot.GetXaxis().SetTitle("z   [mm]")
  plot.GetXaxis().SetLabelSize( 0.04 )
  plot.GetYaxis().SetLabelSize( 0.04 )
  plot.GetXaxis().SetTitleSize( 0.05 )
  plot.GetYaxis().SetTitleSize( 0.05 )
  plot.Draw("AL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "magnetic_field.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("virtual_plots/field")
  plot.GetYaxis().SetTitle("B_{z}   [T]")
  plot.GetXaxis().SetTitle("z   [mm]")
  plot.GetXaxis().SetLabelSize( 0.04 )
  plot.GetYaxis().SetLabelSize( 0.04 )
  plot.GetXaxis().SetTitleSize( 0.05 )
  plot.GetYaxis().SetTitleSize( 0.05 )
  plot.Draw("AL")
  canvas.SaveAs(outfilename, 'pdf')


  infile.Close()


def verification_plots( filename ) :
  infile = ROOT.TFile(filename)

  outfilename = os.path.join(OUTPUT_DIRECTORY, "trackpoints_track.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("track_plots/trackpoints_track")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetRangeUser(0.0, 16.0)
  plot.GetXaxis().SetTitle("# Trackpoints")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  for tracker in [ 0, 1 ] :
    for station in range(1, 6) :
      outfilename = os.path.join(OUTPUT_DIRECTORY, "kuno_{0}-{1}.pdf".format(tracker, station))
      canvas = ROOT.TCanvas("temp_canvas")
      plot = infile.Get("station_plots/{0}.{1}/{0}.{1}_kuno".format(tracker, station))
      plot.SetStats(ROOT.kFALSE)
      plot.GetXaxis().SetTitle("Kuno Sum")
      config_axes(plot)
      plot.Draw()
      canvas.SaveAs(outfilename, 'pdf')

      outfilename = os.path.join(OUTPUT_DIRECTORY, "spacepoints_{0}-{1}.pdf".format(tracker, station))
      canvas = ROOT.TCanvas("temp_canvas")
      plot = infile.Get("station_plots/{0}.{1}/{0}.{1}_spacepoints".format(tracker, station))
      plot.SetStats(ROOT.kFALSE)
      plot.GetXaxis().SetTitle("x  [mm]")
      plot.GetYaxis().SetTitle("y  [mm]")
      config_axes(plot)
      plot.Draw('COL')
      canvas.SaveAs(outfilename, 'pdf')

      outfilename = os.path.join(OUTPUT_DIRECTORY, "2-hit_spacepoints_{0}-{1}.pdf".format(tracker, station))
      canvas = ROOT.TCanvas("temp_canvas")
      plot = infile.Get("station_plots/{0}.{1}/{0}.{1}_2_hit_spacepoints".format(tracker, station))
      plot.SetStats(ROOT.kFALSE)
      plot.GetXaxis().SetTitle("x  [mm]")
      plot.GetYaxis().SetTitle("y  [mm]")
      config_axes(plot)
      plot.Draw('COL')
      canvas.SaveAs(outfilename, 'pdf')

      outfilename = os.path.join(OUTPUT_DIRECTORY, "3-hit_spacepoints_{0}-{1}.pdf".format(tracker, station))
      canvas = ROOT.TCanvas("temp_canvas")
      plot = infile.Get("station_plots/{0}.{1}/{0}.{1}_3_hit_spacepoints".format(tracker, station))
      plot.SetStats(ROOT.kFALSE)
      plot.GetXaxis().SetTitle("x  [mm]")
      plot.GetYaxis().SetTitle("y  [mm]")
      config_axes(plot)
      plot.Draw('COL')
      canvas.SaveAs(outfilename, 'pdf')

      for plane in range(0, 3) :
        outfilename = os.path.join(OUTPUT_DIRECTORY, "adc_channel_{0}-{1}-{2}.pdf".format(tracker, station, plane))
        canvas = ROOT.TCanvas("temp_canvas")
        plot = infile.Get("plane_plots/{0}.{1}.{2}/{0}.{1}.{2}_adc_channel".format(tracker, station, plane))
        plot.SetStats(ROOT.kFALSE)
        plot.GetXaxis().SetTitle("Channel Number")
        plot.GetXaxis().SetRangeUser(0.0, 220.0)
        plot.GetYaxis().SetTitle("ADC")
        config_axes(plot)
        plot.Draw('COL')
        canvas.SaveAs(outfilename, 'pdf')

        outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_channel_{0}-{1}-{2}.pdf".format(tracker, station, plane))
        canvas = ROOT.TCanvas("temp_canvas")
        plot = infile.Get("plane_plots/{0}.{1}.{2}/{0}.{1}.{2}_npe_channel".format(tracker, station, plane))
        plot.SetStats(ROOT.kFALSE)
        plot.GetXaxis().SetTitle("Channel Number")
        plot.GetXaxis().SetRangeUser(0.0, 220.0)
        plot.GetYaxis().SetTitle("NPE")
        config_axes(plot)
        plot.Draw('COL')
        canvas.SaveAs(outfilename, 'pdf')

        outfilename = os.path.join(OUTPUT_DIRECTORY, "digits_{0}-{1}-{2}.pdf".format(tracker, station, plane))
        canvas = ROOT.TCanvas("temp_canvas")
        plot = infile.Get("plane_plots/{0}.{1}.{2}/{0}.{1}.{2}_channel_occup".format(tracker, station, plane))
        plot.SetStats(ROOT.kFALSE)
        plot.GetXaxis().SetTitle("Channel Number")
        plot.GetXaxis().SetRangeUser(0.0, 220.0)
        config_axes(plot)
        plot.Draw()
        canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_spacepoint.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("recon_plots/npe_spacepoint")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("NPE")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

# P-Value Plots
  for track_type in [ "helical", "straight" ] :
    for tracker in [ "up", "down" ] :
      outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_{1}_tracker_p_value.pdf".format(tracker, track_type))
      canvas = ROOT.TCanvas("{0}_tracker_p_value_canv".format(tracker))
      p_val_plot = infile.Get("track_plots/{0}/{0}_tracks_p_value_{1}".format(track_type, tracker))
      p_val_plot.SetStats(ROOT.kFALSE)
      p_val_plot.Rebin(4)
      p_val_plot.GetXaxis().SetTitle("P Value")
      max_y = p_val_plot.GetMaximum()
      p_val_plot.GetXaxis().SetRangeUser(0.0, 1.05*max_y)
      config_axes(plot)
      p_val_plot.Draw()
      canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_spacepoint_log.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  canvas.SetLogy()
  plot = infile.Get("recon_plots/npe_spacepoint")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("NPE")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_fit_spacepoint.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  plot = infile.Get("recon_plots/npe_fit_spacepoint")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("NPE")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_fit_spacepoint_log.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  canvas.SetLogy()
  plot = infile.Get("recon_plots/npe_fit_spacepoint")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("NPE")
  config_axes(plot)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_spacepoint_comp.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  fit_plot = infile.Get("recon_plots/npe_fit_spacepoint")
  plot = infile.Get("recon_plots/npe_spacepoint")
  fit_plot.SetStats(ROOT.kFALSE)
  plot.SetStats(ROOT.kFALSE)
  fit_plot.SetLineColor(1)
  plot.SetLineColor(2)
  fit_plot.GetXaxis().SetTitle("NPE")
  config_axes(plot)
  plot.Draw()
  fit_plot.Draw("same")
  legend = ROOT.TLegend(0.63, 0.77, 0.93, 0.92)
  legend.AddEntry(plot, "Every Spacepoint")
  legend.AddEntry(fit_plot, "Fitted Spacepoints")
  legend.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "npe_spacepoint_comp_log.pdf")
  canvas = ROOT.TCanvas("temp_canvas")
  fit_plot = infile.Get("recon_plots/npe_fit_spacepoint")
  plot = infile.Get("recon_plots/npe_spacepoint")
  fit_plot.SetStats(ROOT.kFALSE)
  plot.SetStats(ROOT.kFALSE)
  fit_plot.SetLineColor(1)
  plot.SetLineColor(2)
  fit_plot.GetXaxis().SetTitle("NPE")
  canvas.SetLogy()
  config_axes(plot)
  plot.Draw()
  fit_plot.Draw("same")
  legend = ROOT.TLegend(0.63, 0.77, 0.93, 0.92)
  legend.AddEntry(plot, "Every Spacepoint")
  legend.AddEntry(fit_plot, "Fitted Spacepoints")
  legend.Draw()
  canvas.SaveAs(outfilename, 'pdf')

# Pulls
  for tracker in [ (0, "up"), (1, "down") ] :
    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pulls_planes.pdf".format(tracker[1]))
    canvas = ROOT.TCanvas("pulls_canvas")
    canvas.Divide(5, 3)

    for station in [ 1, 2, 3, 4, 5 ] :
      for plane in [ 0, 1, 2 ] :
        plot = infile.Get("plane_plots/{0}.{1}.{2}/{0}.{1}.{2}_plane_pull".format(tracker[0], station, plane))
        plot.GetXaxis().SetTitle("Pull  [mm]")
        canvas.cd((station-1)*3 + plane + 1)
        plot.Draw()
    canvas.SaveAs(outfilename, 'pdf')

# Spacepoints per station
  outfilename = os.path.join(OUTPUT_DIRECTORY, "spacepoints_station.pdf".format(tracker[1]))
  canvas = ROOT.TCanvas("spacepoints")
  plot = infile.Get("recon_plots/spacepoints_station")
  plot.GetXaxis().SetTitle("Station ID")
  plot.SetStats(ROOT.kFALSE)
  plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "spacepoints_station_comp.pdf".format(tracker[1]))
  canvas = ROOT.TCanvas("spacepoints")
  plot.SetLineColor(2)
  plot.SetFillColor(2)
  plot.SetFillStyle(3005)
  used_plot = infile.Get("recon_plots/spacepoints_station_used")
  used_plot.SetLineColor(3)
  used_plot.SetFillColor(3)
  used_plot.SetFillStyle(3005)
  used_2_plot = infile.Get("recon_plots/2_hit_spacepoints_station_used")
  used_2_plot.SetLineColor(0)
  used_2_plot.SetFillColor(0)
  used_2_plot.SetFillStyle(3005)
  used_3_plot = infile.Get("recon_plots/3_hit_spacepoints_station_used")
  used_3_plot.SetLineColor(4)
  used_3_plot.SetFillColor(4)
  used_3_plot.SetFillStyle(3005)
  plot.GetXaxis().SetTitle("Station ID")
  plot.SetStats(ROOT.kFALSE)
  plot.Draw()
  used_plot.Draw("same")
  used_3_plot.Draw("same")
#  used_2_plot.Draw("same")
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')


# TOF
  outfilename = os.path.join(OUTPUT_DIRECTORY, "TOF_0-1.pdf")
  canvas = ROOT.TCanvas("tof_0_1")
  tof_plot = infile.Get("recon_plots/tof_0_1")
  tof_plot.Rebin(2)
  tof_plot.SetStats(ROOT.kFALSE)
  tof_plot.GetXaxis().SetTitle("TOF_{01}    [ns]")
  tof_plot.GetXaxis().SetRangeUser(20.0, 50.0)
  tof_plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "TOF_1-2.pdf")
  canvas = ROOT.TCanvas("tof_1_2")
  tof_plot = infile.Get("recon_plots/tof_1_2")
  tof_plot.Rebin(2)
  tof_plot.SetStats(ROOT.kFALSE)
  tof_plot.GetXaxis().SetTitle("TOF_{12}    [ns]")
  tof_plot.GetXaxis().SetRangeUser(20.0, 50.0)
  tof_plot.Draw()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "TOF_0-1_cuts.pdf")
  canvas = ROOT.TCanvas("tof_0_1_cuts")
  tof_plot = infile.Get("recon_plots/tof_0_1")
  cut_plot = infile.Get("recon_plots/tof_0_1_cut")
#  tof_plot.Rebin(2)
  cut_plot.Rebin(2)
  tof_plot.SetStats(ROOT.kFALSE)
  cut_plot.SetStats(ROOT.kFALSE)
  tof_plot.SetLineColor(1)
  cut_plot.GetXaxis().SetTitle("TOF_{01}    [ns]")
  cut_plot.GetXaxis().SetRangeUser(20.0, 50.0)
  cut_plot.SetLineColor(2)
  cut_plot.SetFillColor(2)
  cut_plot.SetFillStyle(3005)
  cut_plot.Draw()
  tof_plot.Draw("same")
  legend = ROOT.TLegend(0.63, 0.77, 0.93, 0.92)
  legend.AddEntry(tof_plot, "All Events")
  legend.AddEntry(cut_plot, "Selected Events")
  legend.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "TOF_1-2_cuts.pdf")
  canvas = ROOT.TCanvas("tof_1_2_cuts")
  tof_plot = infile.Get("recon_plots/tof_1_2")
  cut_plot = infile.Get("recon_plots/tof_1_2_cut")
#  tof_plot.Rebin(2)
  cut_plot.Rebin(2)
  tof_plot.SetStats(ROOT.kFALSE)
  cut_plot.SetStats(ROOT.kFALSE)
  tof_plot.SetLineColor(1)
  cut_plot.GetXaxis().SetTitle("TOF_{12}    [ns]")
  cut_plot.GetXaxis().SetRangeUser(20.0, 50.0)
  cut_plot.SetLineColor(2)
  cut_plot.SetFillColor(2)
  cut_plot.SetFillStyle(3005)
  cut_plot.Draw()
  tof_plot.Draw("same")
  legend = ROOT.TLegend(0.63, 0.77, 0.93, 0.92)
  legend.AddEntry(tof_plot, "All Events")
  legend.AddEntry(cut_plot, "Selected Events")
  legend.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')

  infile.Close()


def tracker_resolution_plots( filename ) :
  infile = ROOT.TFile(filename)

  for tracker in [ 'upstream', 'downstream' ] :
    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_p_bias_p.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/p_residual_p_bias'.format(tracker))
    graph.GetXaxis().SetTitle('p   [MeV/c]')
    graph.GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetYaxis().SetTitle('#Delta_{p}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(-1.0, 1.0)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_seed_p_bias_p.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/seed_p_residual_p_bias'.format(tracker))
    graph.GetXaxis().SetTitle('p   [MeV/c]')
    graph.GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetYaxis().SetTitle('#Delta_{p}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(-0.5, 0.5)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

#    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_p_residual.pdf".format(tracker))
#    canvas = ROOT.TCanvas("temp_canvas")
#    graph = infile.Get('{0}/residual_p'.format(tracker))
#    graph.GetXaxis().SetTitle('#Delta_{p}   [MeV/c]')
#    graph.GetXaxis().SetRangeUser(-10.0, 10.0)
#    graph.Draw()
#    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_seed_p_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/seed_p_residual'.format(tracker))
    graph.GetXaxis().SetTitle('#Delta_{p}   [MeV/c]')
    graph.GetXaxis().SetRangeUser(-10.0, 10.0)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')


    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pt_resolution_pt.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/pt_residual_pt_resolution'.format(tracker))
    graph.GetXaxis().SetTitle('p_{t}   [MeV/c]')
    graph.GetXaxis().SetRangeUser(0.0, 100.0)
    graph.GetYaxis().SetTitle('#sigma_{p_{t}}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(0.0, 1.5)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pt_resolution_pz.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/pt_residual_pz_resolution'.format(tracker))
    graph.GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetXaxis().SetTitle('p_{z}   [MeV/c]')
    graph.GetYaxis().SetTitle('#sigma_{p_{t}}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(0.0, 1.5)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pz_resolution_pt.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/pz_residual_pt_resolution'.format(tracker))
    graph.GetXaxis().SetTitle('p_{t}   [MeV/c]')
    graph.GetXaxis().SetRangeUser(0.0, 100.0)
    graph.GetYaxis().SetTitle('#sigma_{p_{z}}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(0.0, 15.0)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pz_resolution_pz.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/pz_residual_pz_resolution'.format(tracker))
    graph.GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetXaxis().SetTitle('p_{z}   [MeV/c]')
    graph.GetYaxis().SetTitle('#sigma_{p_{z}}   [MeV/c]')
    graph.GetYaxis().SetRangeUser(0.0, 8.0)
    graph.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_tp_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/trackpoint_efficiency'.format(tracker))
    graph.Draw()
    ROOT.gPad.Update()
    graph.GetPaintedHistogram().GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetPaintedHistogram().GetYaxis().SetRangeUser(0.0, 100.0)
    graph.SetTitle(";p_{z}   [MeV/c];p_{t}   [MeV/c]")
    graph.SetDrawOption('colz')
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pz_tp_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/trackpoint_efficiency_pz'.format(tracker))
    graph.Draw()
    ROOT.gPad.Update()
    graph.GetPaintedGraph().GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetPaintedGraph().GetYaxis().SetRangeUser(0.85, 1.0)
    graph.SetTitle(";p_{z}   [MeV/c];Trackpoint Efficiency")
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pt_tp_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/trackpoint_efficiency_pt'.format(tracker))
    graph.Draw()
    ROOT.gPad.Update()
    graph.GetPaintedGraph().GetXaxis().SetRangeUser(0.0, 100.0)
    graph.GetPaintedGraph().GetYaxis().SetRangeUser(0.85, 1.0)
    graph.SetTitle(";p_{t}   [MeV/c];Trackpoint Efficiency")
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_track_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/track_efficiency'.format(tracker))
    graph.Draw()
    ROOT.gPad.Update()
    graph.GetPaintedHistogram().GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetPaintedHistogram().GetYaxis().SetRangeUser(0.0, 100.0)
    graph.SetTitle(";p_{z}   [MeV/c];p_{t}   [MeV/c]")
    graph.SetDrawOption('colz')
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pz_track_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/track_efficiency_pz'.format(tracker))
    graph.Draw()
    ROOT.gPad.Update()
    graph.GetPaintedGraph().GetXaxis().SetRangeUser(140.0, 250.0)
    graph.GetPaintedGraph().GetYaxis().SetRangeUser(0.85, 1.0)
    graph.SetTitle(";p_{z}   [MeV/c];Track Efficiency")
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pt_track_efficiency.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    graph = infile.Get('{0}/track_efficiency_pt'.format(tracker))
    graph.Draw("AP")
    ROOT.gPad.Update()
    graph.GetPaintedGraph().GetYaxis().SetRangeUser(0.85, 1.0)
    graph.GetPaintedGraph().GetXaxis().SetRangeUser(0.0, 100.0)
    graph.SetTitle(";p_{t}   [MeV/c];Track Efficiency")
    canvas.SaveAs(outfilename, 'pdf')


    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_2D_xy_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    plot = infile.Get("{0}/residual_xy".format(tracker))
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetRangeUser(-5.0, 5.0)
    plot.GetYaxis().SetRangeUser(-5.0, 5.0)
    plot.GetXaxis().SetTitle("x  [mm]")
    plot.GetYaxis().SetTitle("y  [mm]")
    config_axes(plot)
    plot.Draw('col')
    canvas.SaveAs(outfilename, 'pdf')


    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_x_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_xy".format(tracker))
    plot = temp_plot.ProjectionX()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{x}  [mm]")
    plot.GetXaxis().SetRangeUser(-5.0, 5.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_y_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_xy".format(tracker))
    plot = temp_plot.ProjectionY()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{y}  [mm]")
    plot.GetXaxis().SetRangeUser(-5.0, 5.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_2D_pxpy_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    plot = infile.Get("{0}/residual_pxpy".format(tracker))
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetRangeUser(-7.0, 7.0)
    plot.GetYaxis().SetRangeUser(-7.0, 7.0)
    plot.GetXaxis().SetTitle("#Delta_{p_{x}}   [MeV/c]")
    plot.GetYaxis().SetTitle("#Delta_{p_{y}}   [MeV/c]")
    config_axes(plot)
    plot.Draw('col')
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_px_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_pxpy".format(tracker))
    plot = temp_plot.ProjectionX()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{p_{x}}  [MeV/c]")
    plot.GetXaxis().SetRangeUser(-10.0, 10.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_py_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_pxpy".format(tracker))
    plot = temp_plot.ProjectionY()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{p_{y}}  [MeV/c]")
    plot.GetXaxis().SetRangeUser(-10.0, 10.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_2D_mxmy_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    plot = infile.Get("{0}/residual_mxmy".format(tracker))
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetRangeUser(-0.1, 0.1)
    plot.GetYaxis().SetRangeUser(-0.1, 0.1)
    plot.GetXaxis().SetTitle("#Delta_{m_{x}}")
    plot.GetYaxis().SetTitle("#Delta_{m_{y}}")
    config_axes(plot)
    plot.Draw('col')
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_mx_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_mxmy".format(tracker))
    plot = temp_plot.ProjectionY()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{m_{x}}")
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_my_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    temp_plot = infile.Get("{0}/residual_mxmy".format(tracker))
    plot = temp_plot.ProjectionY()
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{m_{y}}")
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pt_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    plot = infile.Get("{0}/residual_pt".format(tracker))
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{p_{t}}   [MeV/c]")
    plot.GetXaxis().SetRangeUser(-10.0, 10.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

    outfilename = os.path.join(OUTPUT_DIRECTORY, "{0}_pz_residual.pdf".format(tracker))
    canvas = ROOT.TCanvas("temp_canvas")
    plot = infile.Get("{0}/residual_pz".format(tracker))
    plot.SetStats(ROOT.kFALSE)
    plot.GetXaxis().SetTitle("#Delta_{p_{z}}   [MeV/c]")
    plot.GetXaxis().SetRangeUser(-20.0, 20.0)
    config_axes(plot)
    plot.Draw()
    plot.Fit("gaus", "Q0S")
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    rms_x = func.GetParameter(2)
    plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
    func = plot.GetFunction("gaus")
    mean_x = func.GetParameter(1)
    mean_x_err = func.GetParError(1)
    rms_x = func.GetParameter(2)
    rms_x_err = func.GetParError(2)
    textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
    textbox.AddText("#mu = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
    textbox.AddText("#sigma = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
    canvas.SaveAs(outfilename, 'pdf')

  infile.Close()


def tracker_alignment_plots(filename) :
  infile = ROOT.TFile(filename)

  outfilename = os.path.join(OUTPUT_DIRECTORY, "x-y_residual.pdf")
  canvas = ROOT.TCanvas("x-y_residual")
  plot = infile.Get("residuals/xy")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("x    [mm]")
  plot.GetYaxis().SetTitle("y    [mm]")
  config_axes(plot)
  plot.Draw("COL")
  f2 = ROOT.TF2("f2", "xygaus", -10.0, 10.0, -10.0, 10.0)
  fit_result = plot.Fit("f2", "Q0S")
  func = plot.GetFunction("f2")
  mean_x = func.GetParameter(1)
  rms_x = func.GetParameter(2)
  mean_y = func.GetParameter(3)
  rms_y = func.GetParameter(4)

  f3 = ROOT.TF2("xf3", "xygaus", mean_x-rms_x, mean_x+rms_x, mean_y-rms_y, mean_y+rms_y)
  fit_result = plot.Fit("xf3", "Q0S")
  func = plot.GetFunction("xf3")
  mean_x = func.GetParameter(1)
  mean_x_err = func.GetParError(1)
  mean_y = func.GetParameter(3)
  mean_y_err = func.GetParError(3)
  textbox = ROOT.TPaveText(0.63, 0.77, 0.93, 0.92, "NDC")
  textbox.AddText("#Delta_{{x}} = {0: 0.3f} #pm {1:0.3f} mm".format(mean_x, mean_x_err) )
  textbox.AddText("#Delta_{{y}} = {0: 0.3f} #pm {1:0.3f} mm".format(mean_y, mean_y_err) )
  textbox.SetFillColor(0)
  textbox.SetBorderSize(1)
  textbox.SetLineColor(1)
  textbox.SetTextAlign(11)
  textbox.Draw()
  canvas.SaveAs(outfilename, 'pdf')


  outfilename = os.path.join(OUTPUT_DIRECTORY, "mx-my_residual.pdf")
  canvas = ROOT.TCanvas("mx-my_residual")
  plot = infile.Get("residuals/mxmy")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("m_{x}")
  plot.GetYaxis().SetTitle("m_{y}")
  config_axes(plot)
  plot.Draw("COL")
  f2 = ROOT.TF2("f2", "xygaus", -10.0, 10.0, -10.0, 10.0)
  fit_result = plot.Fit("f2", "Q0S")
  func = plot.GetFunction("f2")
  mean_x = func.GetParameter(1)
  rms_x = func.GetParameter(2)
  mean_y = func.GetParameter(3)
  rms_y = func.GetParameter(4)

  f3 = ROOT.TF2("mf3", "xygaus", mean_x-rms_x, mean_x+rms_x, mean_y-rms_y, mean_y+rms_y)
  fit_result = plot.Fit("mf3", "Q0S")
  func = plot.GetFunction("mf3")
  mean_x = func.GetParameter(1) * 1000.0
  mean_x_err = func.GetParError(1) * 1000.0
  mean_y = func.GetParameter(3) * 1000.0
  mean_y_err = func.GetParError(3) * 1000.0
  textbox = ROOT.TPaveText(0.63, 0.77, 0.93, 0.92, "NDC")
  textbox.AddText("#delta_{{m_{{x}}}} = {0: 0.3f} #pm {1:0.3f}".format(mean_x, mean_x_err) )
  textbox.AddText("#delta_{{m_{{y}}}} = {0: 0.3f} #pm {1:0.3f}".format(mean_y, mean_y_err) )
  textbox.SetFillColor(0)
  textbox.SetBorderSize(1)
  textbox.SetLineColor(1)
  textbox.SetTextAlign(11)
  textbox.Draw()
  canvas.SaveAs(outfilename, 'pdf')


  outfilename = os.path.join(OUTPUT_DIRECTORY, "tx-ty_residual.pdf")
  canvas = ROOT.TCanvas("tx-ty_residual")
  plot = infile.Get("residuals/txty")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("#phi_{x}    [rad]")
  plot.GetYaxis().SetTitle("#phi_{y}    [rad]")
  config_axes(plot)
  plot.Draw("COL")
  f2 = ROOT.TF2("f2", "xygaus", -10.0, 10.0, -10.0, 10.0)
  fit_result = plot.Fit("f2", "Q0S")
  func = plot.GetFunction("f2")
  mean_x = func.GetParameter(1)
  rms_x = func.GetParameter(2)
  mean_y = func.GetParameter(3)
  rms_y = func.GetParameter(4)

  f3 = ROOT.TF2("tf3", "xygaus", mean_x-rms_x, mean_x+rms_x, mean_y-rms_y, mean_y+rms_y)
  fit_result = plot.Fit("tf3", "Q0S")
  func = plot.GetFunction("tf3")
  mean_x = func.GetParameter(1) * 1000.0
  mean_x_err = func.GetParError(1) * 1000.0
  mean_y = func.GetParameter(3) * 1000.0
  mean_y_err = func.GetParError(3) * 1000.0
  textbox = ROOT.TPaveText(0.63, 0.77, 0.93, 0.92, "NDC")
  textbox.AddText("#Phi_{{x}} = {0: 0.3f} #pm {1:0.3f} mrad".format(mean_x, mean_x_err) )
  textbox.AddText("#Phi_{{y}} = {0: 0.3f} #pm {1:0.3f} mrad".format(mean_y, mean_y_err) )
  textbox.SetFillColor(0)
  textbox.SetBorderSize(1)
  textbox.SetLineColor(1)
  textbox.SetTextAlign(11)
  textbox.Draw()
  canvas.SaveAs(outfilename, 'pdf')



  outfilename = os.path.join(OUTPUT_DIRECTORY, "theta_residual.pdf")
  canvas = ROOT.TCanvas("theta_residual")
  plot = infile.Get("residuals/theta")
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("#theta - #theta^{m}    [rad]")
  plot.GetXaxis().SetRangeUser(-4.0, 4.0)
  config_axes(plot)
  plot.Draw()
  plot.Fit("gaus", "Q0S", "", -3.15, 3.15)
  func = plot.GetFunction("gaus")
  mean_x = func.GetParameter(1)
  rms_x = func.GetParameter(2)

  plot.Fit("gaus", "QS", "", mean_x-rms_x, mean_x+rms_x ) 
  func = plot.GetFunction("gaus")
  mean_x = func.GetParameter(1)
  mean_x_err = func.GetParError(1)
  rms_x = func.GetParameter(2)
  rms_x_err = func.GetParError(2)
  textbox = ROOT.TPaveText(0.63, 0.70, 0.93, 0.92, "NDC")
  textbox.AddText("#Theta = {0: 0.3f} #pm {1:0.3f} rad".format(mean_x, mean_x_err) )
  textbox.AddText("#sigma_{{#Theta}} = {0: 0.3f} #pm {1:0.3f} rad".format(rms_x, rms_x_err) )
  textbox.SetFillColor(0)
  textbox.SetBorderSize(1)
  textbox.SetLineColor(1)
  textbox.SetTextAlign(11)
  textbox.Draw()
  canvas.SaveAs(outfilename, 'pdf')


  outfilename = os.path.join(OUTPUT_DIRECTORY, "upstream_tracker_tof_residual.pdf")
  canvas = ROOT.TCanvas("up_tracker_tof_xy_canv")
  plot = infile.Get("tof_correlations/upstream/residuals")
  config_axes(plot)
#  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("#delta_{x}    [mm]")
  plot.GetYaxis().SetTitle("#delta_{y}    [mm]")
  plot.Draw("COL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "downstream_tracker_tof_residual.pdf")
  canvas = ROOT.TCanvas("up_tracker_tof_xy_canv")
  plot = infile.Get("tof_correlations/downstream/residuals")
  config_axes(plot)
#  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("#delta_{x}    [mm]")
  plot.GetYaxis().SetTitle("#delta_{y}    [mm]")
  plot.Draw("COL")
  canvas.SaveAs(outfilename, 'pdf')


  outfilename = os.path.join(OUTPUT_DIRECTORY, "upstream_tracker_tof_x-y.pdf")
  canvas = ROOT.TCanvas("up_tracker_tof_xy_canv")
  plot = infile.Get("tof_correlations/upstream/x_y")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("x    [mm]")
  plot.GetYaxis().SetTitle("y^{m}   [mm]")
  plot.Draw("COL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "upstream_tracker_tof_x-x.pdf")
  canvas = ROOT.TCanvas("up_tracker_tof_xx_canv")
  plot = infile.Get("tof_correlations/upstream/x")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("x    [mm]")
  plot.GetYaxis().SetTitle("x^{m}   [mm]")
  plot.Draw("COL")
  profile = analysis.tools.gaussian_profile_y(plot, -200.0, 200.0)
  if profile is not None :
    profile.Draw("samep")
    profile.Fit("pol1", "QS", "", -150.0, 150.0)
    func = profile.GetFunction("pol1")
    gradient = func.GetParameter(1)
    gradient_err = func.GetParError(1)
    correlation = plot.GetCorrelationFactor()
    textbox = ROOT.TPaveText(0.63, 0.13, 0.93, 0.25, "NDC")
#    textbox.AddText("Corr(x, x^{{m}}) = {0: 0.3f}".format(correlation) )
    textbox.AddText("Gradient = {0: 0.3f} #pm {1:0.3f}".format(gradient, gradient_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "upstream_tracker_tof_y-y.pdf")
  canvas = ROOT.TCanvas("up_tracker_tof_yy_canv")
  plot = infile.Get("tof_correlations/upstream/y")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("y    [mm]")
  plot.GetYaxis().SetTitle("y^{m}   [mm]")
  plot.Draw("COL")
  profile = analysis.tools.gaussian_profile_y(plot, -200.0, 200.0)
  if profile is not None :
    profile.Draw("samep")
    profile.Fit("pol1", "QS", "", -150.0, 150.0)
    func = profile.GetFunction("pol1")
    gradient = func.GetParameter(1)
    gradient_err = func.GetParError(1)
    correlation = plot.GetCorrelationFactor()
    textbox = ROOT.TPaveText(0.63, 0.13, 0.93, 0.25, "NDC")
#    textbox.AddText("Corr(x, x^{{m}}) = {0: 0.3f}".format(correlation) )
    textbox.AddText("Gradient = {0: 0.3f} #pm {1:0.3f}".format(gradient, gradient_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "downstream_tracker_tof_x-y.pdf")
  canvas = ROOT.TCanvas("down_tracker_tof_xy_canv")
  plot = infile.Get("tof_correlations/downstream/x_y")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("x    [mm]")
  plot.GetYaxis().SetTitle("y^{m}   [mm]")
  plot.Draw("COL")
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "downstream_tracker_tof_x-x.pdf")
  canvas = ROOT.TCanvas("down_tracker_tof_xx_canv")
  plot = infile.Get("tof_correlations/downstream/x")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("x    [mm]")
  plot.GetYaxis().SetTitle("x^{m}    [mm]")
  plot.Draw("COL")
  profile = analysis.tools.gaussian_profile_y(plot, -200.0, 200.0)
  if profile is not None :
    profile.Draw("samep")
    profile.Fit("pol1", "QS")
    func = profile.GetFunction("pol1")
    gradient = func.GetParameter(1)
    gradient_err = func.GetParError(1)
    correlation = plot.GetCorrelationFactor()
    textbox = ROOT.TPaveText(0.63, 0.13, 0.93, 0.25, "NDC")
#    textbox.AddText("Corr(x, x^{{m}}) = {0: 0.3f}".format(correlation) )
    textbox.AddText("Gradient = {0: 0.3f} #pm {1:0.3f}".format(gradient, gradient_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')

  outfilename = os.path.join(OUTPUT_DIRECTORY, "downstream_tracker_tof_y-y.pdf")
  canvas = ROOT.TCanvas("down_tracker_tof_yy_canv")
  plot = infile.Get("tof_correlations/downstream/y")
  config_axes(plot)
  plot.SetStats(ROOT.kFALSE)
  plot.GetXaxis().SetTitle("y    [mm]")
  plot.GetYaxis().SetTitle("y^{m}    [mm]")
  plot.Draw("COL")
  profile = analysis.tools.gaussian_profile_y(plot, -200.0, 200.0)
  if profile is not None :
    profile.Draw("samep")
    profile.Fit("pol1", "QS")
    func = profile.GetFunction("pol1")
    gradient = func.GetParameter(1)
    gradient_err = func.GetParError(1)
    correlation = plot.GetCorrelationFactor()
    textbox = ROOT.TPaveText(0.63, 0.13, 0.93, 0.25, "NDC")
#    textbox.AddText("Corr(x, x^{{m}}) = {0: 0.3f}".format(correlation) )
    textbox.AddText("Gradient = {0: 0.3f} #pm {1:0.3f}".format(gradient, gradient_err) )
    textbox.SetFillColor(0)
    textbox.SetBorderSize(1)
    textbox.SetLineColor(1)
    textbox.SetTextAlign(11)
    textbox.Draw()
  ROOT.gPad.RedrawAxis()
  canvas.SaveAs(outfilename, 'pdf')


  infile.Close()





FILE_TYPES = { 'kalman_validation' : kalman_validation_plots, \
               'emittance_reconstruction' : emittance_reconstruction_plots, \
               'virtual_plane' : virtual_plane_plots, \
               'verification' : verification_plots, \
               'resolution' : tracker_resolution_plots, \
               'alignment' : tracker_alignment_plots }

if __name__ == "__main__" :
  parser = argparse.ArgumentParser(description='Make data into thesis plots! '+\
      'Choose from one of: kalman_validation, emittance_reconstruction, virtual_plane, verification, or resolution.')
  parser.add_argument('file_type', help="Type of plot file")
  parser.add_argument('maus_root_file', help='ROOT file with plots')  

  parser.add_argument('-D', '--output_directory', help='Specify the output location', default=OUTPUT_DIRECTORY)


  try :
    namespace = parser.parse_args()

    OUTPUT_DIRECTORY = namespace.output_directory
    FILE_TYPES[namespace.file_type](namespace.maus_root_file)

  except BaseException as ex:
    raise
  else :
    print "COMPLETE"

